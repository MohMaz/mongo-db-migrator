# report.py
import json

from java_migration_tool.models import CodebaseSummary


def create_codebase_prompt(codebase_summary: CodebaseSummary) -> str:
    """Create a prompt from the codebase summary.

    Args:
        codebase_summary: Summary of the analyzed codebase

    Returns:
        A formatted prompt describing the codebase
    """
    prompt_parts = [
        "# Codebase Analysis",
        f"\n## Project Location\n{codebase_summary.project_path}",
    ]

    # Add entities section
    prompt_parts.append("\n## Entity Models")
    entities_by_package = codebase_summary.list_entities()
    for package, entities in entities_by_package.items():
        prompt_parts.append(f"\n### Package: {package}")
        for entity in entities:
            prompt_parts.append(f"\n#### {entity.name}")
            prompt_parts.append(f"Description: {entity.description}")
            if entity.annotations:
                prompt_parts.append(f"Annotations: {', '.join(entity.annotations)}")

    # Add repositories section
    prompt_parts.append("\n## JPA Repositories")
    repos_by_entity = codebase_summary.list_repositories()
    for entity_type, repos in repos_by_entity.items():
        prompt_parts.append(f"\n### Entity Type: {entity_type}")
        for repo in repos:
            prompt_parts.append(f"\n#### {repo.name}")
            if repo.methods:
                prompt_parts.append("Methods:")
                for method in repo.methods:
                    prompt_parts.append(f"- {method.name}()")
                    if method.annotations:
                        prompt_parts.append(f"  Annotations: {', '.join(method.annotations)}")

    # Add database configuration section
    prompt_parts.append("\n## Database Configuration")
    configs_by_type = codebase_summary.list_database_configs()
    for db_type, configs in configs_by_type.items():
        prompt_parts.append(f"\n### {db_type.upper()}")
        for config in configs:
            prompt_parts.append(f"\nConfiguration in: {config.file}")
            prompt_parts.append("Properties:")
            for key, value in config.properties.items():
                prompt_parts.append(f"- {key}: {value}")

    return "\n".join(prompt_parts)


def generate_report(
    codebase_summary: CodebaseSummary,
    migration_plan: str,
    schema: str = "",
    format: str = "markdown",
) -> str:
    """Generate a migration report.

    Args:
        codebase_summary: Summary of the analyzed codebase
        migration_plan: Migration plan generated by the LLM
        schema: Optional MongoDB schema suggestions
        format: Output format ("markdown" or "json")

    Returns:
        Report in the specified format
    """
    if format == "json":
        return json.dumps(
            {
                "codebase_summary": codebase_summary.model_dump(),
                "migration_plan": migration_plan,
                "schema": schema,
            },
            indent=2,
        )

    # Generate markdown report
    report = [
        "# Spring Boot MongoDB Migration Plan\n",
        "## 1. Current Application Overview\n",
        f"The application is located at: `{codebase_summary.project_path}`\n",
    ]

    # Add entity classes section
    report.append("### 1.1 Entity Models\n")
    entities_by_package = codebase_summary.list_entities()
    for package, entities in entities_by_package.items():
        report.append(f"#### Package: {package}")
        for entity in entities:
            report.append(
                f"\n**{entity.name}**: {entity.description}. Annotations: {', '.join(entity.annotations)}"
            )

    # Add repositories section
    report.append("\n### 1.2 JPA Repositories\n")
    repos_by_entity = codebase_summary.list_repositories()
    for entity_type, repos in repos_by_entity.items():
        report.append(f"#### Entity Type: {entity_type}")
        for repo in repos:
            report.append(f"\n**{repo.name}**")
            if repo.methods:
                report.append("Methods:")
                for method in repo.methods:
                    report.append(f"- {method.name}()")
                    if method.annotations:
                        report.append(f"  Annotations: {', '.join(method.annotations)}")

    # Add database configuration section
    report.append("\n### 1.3 Database Configuration\n")
    configs_by_type = codebase_summary.list_database_configs()
    for db_type, configs in configs_by_type.items():
        report.append(f"#### {db_type.upper()}")
        for config in configs:
            report.append(f"\nConfiguration in: {config.file}")
            report.append("Properties:")
            for key, value in config.properties.items():
                report.append(f"- {key}: {value}")

    # Add migration plan
    if schema:
        report.extend(
            [
                "\n## 2. MongoDB Migration Strategy\n",
                "### 2.1 Schema Design\n",
                "When migrating from a relational database to MongoDB, we need to rethink our data model. MongoDB's document model allows for embedded documents and references between documents.\n",
                "\n#### Proposed MongoDB Schema:\n",
            ]
        )

        report.append(schema)

    return "\n".join(report)
